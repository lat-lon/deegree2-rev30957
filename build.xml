<?xml version="1.0"?>
<!--
    Ant build file for deegree. Tested with Ant 1.7.0.

    This file is part of deegree.
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    Copyright (C) 2001-2008 by:
          EXSE, Department of Geography, University of Bonn
          http://www.giub.uni-bonn.de/exse/
          lat/lon GmbH, Bonn, Germany
          http://www.lat-lon.de

    $HeadURL: https://scm.wald.intevation.org/svn/deegree/base/trunk/build.xml $
    $Revision: 30569 $, $Date: 2011-04-27 14:55:00 +0200 (Mi, 27. Apr 2011) $
    $Author: mschneider $
-->
<!DOCTYPE project [
    <!ENTITY global SYSTEM "global.xml">
]>

<project name="deegree" default="compile" basedir=".">

    <description>deegree - Java framework for geospatial solutions</description>

    <!-- include global properties -->
    &global;

  <!--
       NOTE: There is no need to change anything below this point. See global.xml and
       local.xml to configure this build script.
  -->

    <!-- =================================================================== -->
    <!-- create directories and load properties                              -->
    <!-- =================================================================== -->

    <target name="init">
        <tstamp>
            <format property="init.date" pattern="yyyy/MM/dd HH:mm" />
        </tstamp>
        <mkdir dir="${build}" />
        <mkdir dir="${dist}" />
        <!-- version + buildId properties -->
        <echo message="deegree version: ${version.number}" />
        <echo message="old build.number: ${build.number}" />
        <echo message="build.by: ${build.by}" />
        <echo message="ant.java.version: ${ant.java.version}" />
        <echo message="source.version: ${source.version}" />
        <echo message="target.version: ${target.version}" />
        <loadfile srcFile=".svn/entries" property="svn.version" failonerror="false">
            <filterchain>
                <headfilter lines="1"/>
                <striplinebreaks/>
            </filterchain>
        </loadfile>
        <echo message="svn.version: '${svn.version}'" />
        <if>
            <equals arg1="${svn.version}" arg2="10" />
            <then>
                <loadfile srcFile=".svn/entries" property="svn.revision.new" failonerror="false">
                    <filterchain>
                        <headfilter lines="1" skip="3" />
                    </filterchain>
                </loadfile>
                <loadfile srcFile=".svn/entries" property="svn.path.new" failonerror="false">
                    <filterchain>
                        <headfilter lines="1" skip="4" />
                    </filterchain>
                </loadfile>
            </then>
            <else>
                <echo message="*******************************************************************************************"/>
                <echo message="Unrecognized SVN version ${svn.version}. SVN revision and path won't be available in build." />
                <echo message="*******************************************************************************************"/>
            </else>
        </if>
        <echo message="Using svn revision: ${svn.revision.new}" />
        <echo message="From svn path: ${svn.path.new}" />
    </target>

    <!-- =================================================================== -->
    <!-- prints the environment                                              -->
    <!-- =================================================================== -->

    <target name="env" depends="init" description="prints the environment">
        <echo>Environment:</echo>
        <echo>------------</echo>
        <echo message="java.home = ${java.home}" />
        <echo message="java.version = ${java.version}" />
        <echo message="java.class.path = ${java.class.path}" />
        <echo message="ant.home = ${ant.home}" />
        <echo message="ant.version = ${ant.version}" />
        <echo message="user.home = ${user.home}" />
        <echo message="user.dir = ${user.dir}" />

        <echo>Application:</echo>
        <echo>------------</echo>
        <echo message="project.name = ${ant.project.name}" />
        <echo message="application.name = ${app.name}" />
        <echo message="application.home = ${basedir}" />
        <echo message="src = ${src}" />
        <echo message="lib = ${lib}" />
        <echo message="build = ${build}" />
        <echo message="dist = ${dist}" />
        <echo message="version.class = ${version.class}" />
        <echo message="version.number = ${version.number}" />
        <echo message="build.by = ${build.by}" />
        <echo message="build.date = ${build.date}" />
        <echo message="build.number = ${build.number}" />

        <echo>Server:</echo>
        <echo>------------</echo>
        <echo message="default.server = ${default.server}" />
        <property name="servername" value="${default.server}" />
        <propertycopy name="default.server.home" from="${servername}.home" />
        <propertycopy name="default.server.deploy.dir" from="${servername}.deploy.dir" />
        <echo message="${default.server}.home = ${default.server.home}" />
        <echo message="${default.server}.deploy.dir = ${default.server.deploy.dir}" />
    </target>

    <!-- =================================================================== -->
    <!-- find packages to exclude (adapt to available libraries)             -->
    <!-- =================================================================== -->
    <!--
    # ArcSDE API:
     * jsde90_sdk.jar
    # Oracle JDBC driver + SDO:
     * ojdbc14.jar
     * oracle_sdo.jar
   -->
    <target name="exclude-packages">
        <condition property="oraclesdo.present">
            <and>
                <available classname="oracle.spatial.geometry.JGeometry" classpathref="build.path" />
                <available classname="oracle.jdbc.OracleDriver" classpathref="build.path" />
            </and>
        </condition>
        <available classname="oracle.spatial.georaster.JGeoRaster" property="oracleraster.present" classpathref="build.path" />
        <available classname="com.esri.sde.sdk.client.SeRelease" property="arcsde.present" classpathref="build.path" />
        <if>
            <equals arg1="${oraclesdo.present}" arg2="true" />
            <then>
                <property name="oracle.exclude.classes" value="" />
                <echo message="Enabling support for Oracle datastores." />
            </then>
            <else>
                <property name="oracle.exclude.classes" value="org/deegree/io/datastore/sql/oracle/**,org/deegree/io/databaseloader/OracleDataLoader.java," />
                <echo message="Disabling support for Oracle datastores." />
            </else>
        </if>
        <if>
            <and>
                <equals arg1="${oraclesdo.present}" arg2="true" />
                <equals arg1="${oracleraster.present}" arg2="true" />
            </and>
            <then>
                <property name="oracleraster.exclude.classes" value="" />
                <echo message="Enabling support for Oracle raster." />
            </then>
            <else>
                <property name="oracleraster.exclude.classes" value="org/deegree/io/oraclegeoraster/**,org/deegree/tools/raster/Oracle*,org/deegree/model/coverage/grid/oracle/**," />
                <echo message="Disabling support for Oracle raster." />
            </else>
        </if>
        <if>
            <equals arg1="${arcsde.present}" arg2="true" />
            <then>
                <property name="arcsde.exclude.classes" value="" />
                <echo message="Enabling support for ArcSDE." />
            </then>
            <else>
                <property name="arcsde.exclude.classes" value="org/deegree/io/sdeapi/**,org/deegree/io/datastore/sde/**," />
                <echo message="Disabling support for ArcSDE." />
            </else>
        </if>
        <property name="exclude.classes" value="${oracle.exclude.classes}${oracleraster.exclude.classes}${arcsde.exclude.classes}" />
        <echo message="exclude.classes=${exclude.classes}" />
    </target>

    <!-- =================================================================== -->
    <!-- create new build number (for next run)                              -->
    <!-- =================================================================== -->

    <target name="new-build-number" depends="init" description="create new build number (for next run)">
        <echo message="creating new build number, previous was ${build.number}" />
        <buildnumber file="${buildId.props}" />
        <propertyfile file="${buildId.props}">
            <entry key="svn.revision" value="${svn.revision.new}" />
            <entry key="svn.path" value="${svn.path.new}" />
        </propertyfile>
    </target>

    <!-- =================================================================== -->
    <!-- compiles all sources and copies all required resouces               -->
    <!-- =================================================================== -->

    <target name="compile" depends="init,exclude-packages" description="compiles all sources and copies all required resouces to the output directory">

        <propertyfile file="${buildId.props}">
            <entry key="build.date" value="${init.date}" />
        </propertyfile>
        <propertycopy property="build.date" from="init.date" override="yes" />

        <javac srcdir="${src}" destdir="${build}" excludes="${exclude.classes}" includes="**/*.java" fork="true" memorymaximumsize="1024M" encoding="utf-8" debug="${debug.true}" source="${source.version}" target="${target.version}">
            <classpath>
                <path refid="build.path" />
            </classpath>
        </javac>
        <copy todir="${build}">
            <fileset dir="${src}" includes="**/*.*" excludes="**/package.html, **/*.java" />
        </copy>

    </target>

    <target name="jar-services" depends="init,exclude-packages" description="compiles all sources that are needed for the services and makes a services.jar">
        <delete dir="servicesclasses" />
        <mkdir dir="servicesclasses" />
        <propertyfile file="${buildId.props}">
            <entry key="build.date" value="${init.date}" />
        </propertyfile>
        <propertycopy property="build.date" from="init.date" override="yes" />

        <javac sourcepath="src" srcdir="${src}" destdir="servicesclasses" excludes="${exclude.classes}" includes="**/OGCServletController.java, **/ConfigurableOWSProxyServletFilter.java, **/JCLLogger.java, **/owsrequestvalidator/**/*java, **/SQLRegistry.java, **/PostGISDatastore.java, **/DefaultGetFeatureInfoHandler.java, **/DefaultGetMapHandler.java, **/UUIDGenerator.java, **/UserPasswordAuthentication.java, **/ResponseCRSTransformationTrigger.java, **/RequestCRSTransformationTrigger.java" fork="true" memorymaximumsize="1024M" encoding="utf-8" debug="${debug.true}" source="${source.version}" target="${target.version}">
            <classpath>
                <fileset dir="lib" includes="**/*jar" />
            </classpath>
        </javac>
        <copy todir="servicesclasses">
            <fileset dir="${src}" includes="**/*.*" excludes="**/package.html, **/*.java" />
        </copy>

        <jar basedir="servicesclasses" destfile="dist/services.jar" />
    </target>

    <!-- =================================================================== -->
    <!-- creates JavaDoc API                                                 -->
    <!-- =================================================================== -->

    <target name="javadoc" depends="compile" description="creates JavaDoc API">
        <!-- Create the ${doc}/lib directory -->
        <mkdir dir="${doc}" />

        <javadoc source="1.5" packagenames="org.*,javax.*" sourcepath="${src}" destdir="${doc}" author="true" version="true" verbose="${debug}" use="true" package="true" linksource="true" excludepackagenames="${exclude.classes}" overview="${src}/overview.html" doctitle="deegree - Java framework for geospatial solutions" windowtitle="deegree framework ${version.number}" header="deegree ${version.number} (${build.date} build-${build.number}-${build.by})" footer="deegree ${version.number} (${build.date} build-${build.number}-${build.by})" maxmemory="512m" encoding="utf-8">

            <bottom>
                <![CDATA[<p align="center">an open source project founded by <a href="http://www.latlon.de">lat/lon</a>, Bonn, Germany.<BR>
                    <i>For more information visit: <a href="http://www.deegree.org">http://www.deegree.org</a>
                    </i>
                </p>]]>
            </bottom>

            <!-- custom tags -->
            <tag name="todo" scope="all" description="To do:" />
            <tag name="TODO" scope="all" description="To do:" />
            <tag name="bug" scope="all" description="Known bug:" />

            <!-- uml tags... todo? -->
            <tag name="uml.associationEnd" description="" />
            <tag name="uml.property" description="" />
            <tag name="UML" description="" />

            <!-- what is this? -->
            <tag name="rename" description="rename" />
            <tag name="revisit" description="revisit" />
            <tag name="unitof" description="" />

            <tag name="associates" scope="all" description="Together" enabled="false" />
            <tag name="clientCardinality" scope="all" description="Together" enabled="false" />
            <tag name="ejb" scope="all" description="Xdoclet" enabled="false" />

            <group title="deegree Coordinate Reference System (crs)" packages="org.deegree.crs*" />
            <group title="deegree Framework" packages="org.deegree.framework*" />
            <group title="deegree Enterprise Services" packages="org.deegree.enterprise*" />
            <group title="deegree OGC Web Services (OWS)" packages="org.deegree.ogcwebservices*,org.deegree.ogcbase*" />
            <group title="deegree Model" packages="org.deegree.model*" />
            <group title="deegree Datatypes" packages="org.deegree.datatypes*" />
            <group title="deegree Spatial Data Input/Output" packages="org.deegree.io*" />
            <group title="deegree Graphics" packages="org.deegree.graphics*" />
            <group title="deegree Portal" packages="org.deegree.portal*" />
            <group title="deegree Security Framework" packages="org.deegree.security*" />
            <group title="deegree Standalone Tools" packages="org.deegree.tools.*" />

            <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />

            <classpath>
                <path refid="build.path" />
            </classpath>
        </javadoc>
    </target>

    <!-- ########################################################## -->

    <target name="clean" description="clean compile out directories">
        <delete dir="${build}" failonerror="false"/>
        <delete dir="${dist}" failonerror="false"/>
        <delete dir="${doc.base}" failonerror="false"/>
    </target>

    <!-- ########################################################## -->

    <!--target name="cruisecontrol" depends="clean-all, build-lib" description="target for cruisecontrol"-->
    <target name="cruisecontrol" depends="clean-all, build-lib, javadoc, test" description="target for cruisecontrol">
        <echo message="compress jar and javadoc for publishing..." />
        <tar destfile="${dist}/deegree_jar_apidoc.tgz" compression="gzip" longfile="gnu">
            <tarfileset dir="${dist}">
                <include name="${lib.jar}" />
            </tarfileset>

            <tarfileset dir="${doc.base}">
                <include name="api/**/*.*" />
            </tarfileset>
        </tar>
    </target>

    <!-- ########################################################## -->

    <target name="build-lib" description="creates the deegree2.jar">
        <antcall target="new-build-number" />
        <antcall target="compile" />
        <echo message="creating deegree libraries ..." />
        <pathconvert pathsep=" " property="used.libs" refid="dependency.path">
            <flattenmapper />
            <map from="${basedir}${file.separator}${lib}${file.separator}" to="" />
            <map from="${basedir}" to="." />
        </pathconvert>

        <jar jarfile="${dist}/${lib.jar}" update="false">
            <fileset dir="${build}" casesensitive="yes">
                <include name="**/**" />
                <exclude name="**/test/**" />
                <exclude name="**/junit*" />
                <exclude name="alltests/**" />
                <exclude name="alltests/**" />
            </fileset>

            <manifest>
                <attribute name="Built-By" value="${build.by}" />
                <attribute name="Specification-Title" value="${app.name}" />
                <attribute name="Specification-Vendor" value="OpenGIS Consortium" />
                <attribute name="Implementation-Vendor" value="lat/lon GmbH, Germany" />
                <attribute name="Implementation-URL" value="http://www.lat-lon.de" />
                <attribute name="Specification-Version" value="" />
                <attribute name="Implementation-Version" value="${version.number} (${build.date} build-${build.number}-${build.by})" />
                <attribute name="Class-Path" value="${used.libs}" />
                <attribute name="Main-Class" value="org.deegree.framework.version.Version" />
            </manifest>
        </jar>
    </target>

    <target name="build-lib-nocompile" depends="init" description="creates the deegree2.jar without compiling">
        <echo message="creating deegree libraries ..." />
        <pathconvert pathsep=" " property="used.libs" refid="dependency.path">
            <flattenmapper />
            <map from="${basedir}${file.separator}${lib}${file.separator}" to="" />
            <map from="${basedir}" to="." />
        </pathconvert>

        <jar jarfile="${dist}/${lib.jar}" update="false">
            <fileset dir="${build}" casesensitive="yes">
                <include name="**/**" />
                <exclude name="**/*Test*" />
                <exclude name="**/test/**" />
                <exclude name="**/junit*" />
                <exclude name="alltests/**" />
                <exclude name="alltests/**" />
            </fileset>

            <manifest>
                <attribute name="Built-By" value="${build.by}" />
                <attribute name="Specification-Title" value="${app.name}" />
                <attribute name="Specification-Vendor" value="OpenGIS Consortium" />
                <attribute name="Implementation-Vendor" value="lat/lon GmbH, Germany" />
                <attribute name="Implementation-URL" value="http://www.lat-lon.de" />
                <attribute name="Specification-Version" value="" />
                <attribute name="Implementation-Version" value="${version.number} (${build.date} build-${build.number}-${build.by})" />
                <attribute name="Class-Path" value="${used.libs}" />
                <attribute name="Main-Class" value="org.deegree.framework.version.Version" />
            </manifest>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Targets which just delegate tasks to other build files.             -->
    <!-- =================================================================== -->

    <target name="test" depends="clean, compile" description="runs unit tests">
        <ant antfile="build-test.xml" dir="." target="cctest" />
    </target>


    <!-- ########################################################## -->

    <target name="clean-all" depends="clean" description="clean all output directories">
        <ant antfile="build-test.xml" dir="." target="clean" />
    </target>

    <!-- ########################################################## -->

    <target name="zip-javadoc" depends="javadoc">
        <zip destfile="${dist}/deegree-api_${version.number}.zip">
            <zipfileset dir="${doc}" prefix="deegree-api_${version.number}" />
        </zip>
    </target>

    <target name="zip-src">
        <zip destfile="${dist}/deegree-src_${version.number}.zip">
            <zipfileset dir="${src}" prefix="deegree-src_${version.number}" />
        </zip>
        <tar destfile="${dist}/deegree-src_${version.number}.tar">
            <zipfileset dir="${src}" prefix="deegree-src_${version.number}" />
        </tar>
        <gzip src="${dist}/deegree-src_${version.number}.tar" destfile="${dist}/deegree-src_${version.number}.tar.gz" />
        <delete file="${dist}/deegree-src_${version.number}.tar" />
    </target>

</project>
